#pragma version >=0.2.0;
#include "common.func";


() store_data(
    int tg_id,
    slice racing_address,
    slice owner_address,
    slice racer_wallet,
    int range_from,
    int range_to
) impure inline {
    set_data(
        begin_cell()
        .store_uint(tg_id, 64)
        .store_slice(racing_address)
        .store_slice(owner_address)
        .store_slice(racer_wallet)
        .store_uint(range_from, 32)
        .store_uint(range_to, 32)
        .end_cell()
    );
}

(int, int, slice, slice, slice, int, int) load_data() impure inline {
    var ds = get_data().begin_parse();
    var (tg_id, racing_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
        return (
            -1,
            tg_id,
            racing_address,
            ds~load_msg_addr(),
            ds~load_msg_addr(),
            ds~load_uint(32),
            ds~load_uint(32)
        );
    } else {
        return (
            0, 
            tg_id, 
            racing_address, 
            null(), 
            null(), 
            null(), 
            null()
        );
    }
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { 
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    var (init?, tg_id, racing_address, owner_address, racer_wallet, range_from, range_to) = load_data();
    if (~ init?) {
        throw_unless(401, equal_slices(racing_address, sender_address));
        store_data(tg_id, racing_address, in_msg_body~load_msg_addr(), in_msg_body~load_msg_addr(), in_msg_body~load_uint(32), in_msg_body~load_uint(32));
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    if (op == 555) {
        throw_unless(401, equal_slices(owner_address, sender_address));
        refund(in_msg_body~load_msg_addr());
        return ();
    }

    throw(0xffff);
}

(int, slice, slice, int, int) get_racer_data() method_id {
    var (init?, tg_id, racing_address, _, racer_wallet, range_from, range_to) = load_data();
    return (
        tg_id, 
        racing_address, 
        racer_wallet, 
        range_from, 
        range_to
    );
}